// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cubefs/blobstore/api/worker (interfaces: IWorker)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	worker "github.com/cubefs/blobstore/api/worker"
	gomock "github.com/golang/mock/gomock"
)

// MockIWorker is a mock of IWorker interface.
type MockIWorker struct {
	ctrl     *gomock.Controller
	recorder *MockIWorkerMockRecorder
}

// MockIWorkerMockRecorder is the mock recorder for MockIWorker.
type MockIWorkerMockRecorder struct {
	mock *MockIWorker
}

// NewMockIWorker creates a new mock instance.
func NewMockIWorker(ctrl *gomock.Controller) *MockIWorker {
	mock := &MockIWorker{ctrl: ctrl}
	mock.recorder = &MockIWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWorker) EXPECT() *MockIWorkerMockRecorder {
	return m.recorder
}

// RepairShard mocks base method.
func (m *MockIWorker) RepairShard(arg0 context.Context, arg1 string, arg2 *worker.ShardRepairArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepairShard", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RepairShard indicates an expected call of RepairShard.
func (mr *MockIWorkerMockRecorder) RepairShard(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepairShard", reflect.TypeOf((*MockIWorker)(nil).RepairShard), arg0, arg1, arg2)
}

// Stats mocks base method.
func (m *MockIWorker) Stats(arg0 context.Context, arg1 string) (worker.Stats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats", arg0, arg1)
	ret0, _ := ret[0].(worker.Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stats indicates an expected call of Stats.
func (mr *MockIWorkerMockRecorder) Stats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockIWorker)(nil).Stats), arg0, arg1)
}
