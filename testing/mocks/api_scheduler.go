// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cubefs/blobstore/api/scheduler (interfaces: IScheduler)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	scheduler "github.com/cubefs/blobstore/api/scheduler"
	proto "github.com/cubefs/blobstore/common/proto"
	gomock "github.com/golang/mock/gomock"
)

// MockIScheduler is a mock of IScheduler interface.
type MockIScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockISchedulerMockRecorder
}

// MockISchedulerMockRecorder is the mock recorder for MockIScheduler.
type MockISchedulerMockRecorder struct {
	mock *MockIScheduler
}

// NewMockIScheduler creates a new mock instance.
func NewMockIScheduler(ctrl *gomock.Controller) *MockIScheduler {
	mock := &MockIScheduler{ctrl: ctrl}
	mock.recorder = &MockISchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIScheduler) EXPECT() *MockISchedulerMockRecorder {
	return m.recorder
}

// AcquireInspectTask mocks base method.
func (m *MockIScheduler) AcquireInspectTask(arg0 context.Context) (*scheduler.WorkerInspectTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcquireInspectTask", arg0)
	ret0, _ := ret[0].(*scheduler.WorkerInspectTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcquireInspectTask indicates an expected call of AcquireInspectTask.
func (mr *MockISchedulerMockRecorder) AcquireInspectTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireInspectTask", reflect.TypeOf((*MockIScheduler)(nil).AcquireInspectTask), arg0)
}

// AcquireTask mocks base method.
func (m *MockIScheduler) AcquireTask(arg0 context.Context, arg1 *scheduler.AcquireArgs) (*scheduler.WorkerTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcquireTask", arg0, arg1)
	ret0, _ := ret[0].(*scheduler.WorkerTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcquireTask indicates an expected call of AcquireTask.
func (mr *MockISchedulerMockRecorder) AcquireTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireTask", reflect.TypeOf((*MockIScheduler)(nil).AcquireTask), arg0, arg1)
}

// AddManualMigrateTask mocks base method.
func (m *MockIScheduler) AddManualMigrateTask(arg0 context.Context, arg1 *scheduler.AddManualMigrateArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddManualMigrateTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddManualMigrateTask indicates an expected call of AddManualMigrateTask.
func (mr *MockISchedulerMockRecorder) AddManualMigrateTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddManualMigrateTask", reflect.TypeOf((*MockIScheduler)(nil).AddManualMigrateTask), arg0, arg1)
}

// BalanceTaskDetail mocks base method.
func (m *MockIScheduler) BalanceTaskDetail(arg0 context.Context, arg1 *scheduler.TaskStatArgs) (scheduler.MigrateTaskDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BalanceTaskDetail", arg0, arg1)
	ret0, _ := ret[0].(scheduler.MigrateTaskDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BalanceTaskDetail indicates an expected call of BalanceTaskDetail.
func (mr *MockISchedulerMockRecorder) BalanceTaskDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BalanceTaskDetail", reflect.TypeOf((*MockIScheduler)(nil).BalanceTaskDetail), arg0, arg1)
}

// CancelTask mocks base method.
func (m *MockIScheduler) CancelTask(arg0 context.Context, arg1 *scheduler.CancelTaskArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelTask indicates an expected call of CancelTask.
func (mr *MockISchedulerMockRecorder) CancelTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTask", reflect.TypeOf((*MockIScheduler)(nil).CancelTask), arg0, arg1)
}

// CompleteInspect mocks base method.
func (m *MockIScheduler) CompleteInspect(arg0 context.Context, arg1 *scheduler.CompleteInspectArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteInspect", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteInspect indicates an expected call of CompleteInspect.
func (mr *MockISchedulerMockRecorder) CompleteInspect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteInspect", reflect.TypeOf((*MockIScheduler)(nil).CompleteInspect), arg0, arg1)
}

// CompleteTask mocks base method.
func (m *MockIScheduler) CompleteTask(arg0 context.Context, arg1 *scheduler.CompleteTaskArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteTask indicates an expected call of CompleteTask.
func (mr *MockISchedulerMockRecorder) CompleteTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteTask", reflect.TypeOf((*MockIScheduler)(nil).CompleteTask), arg0, arg1)
}

// DeleteService mocks base method.
func (m *MockIScheduler) DeleteService(arg0 context.Context, arg1 *scheduler.DeleteServiceArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockISchedulerMockRecorder) DeleteService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockIScheduler)(nil).DeleteService), arg0, arg1)
}

// DropTaskDetail mocks base method.
func (m *MockIScheduler) DropTaskDetail(arg0 context.Context, arg1 *scheduler.TaskStatArgs) (scheduler.MigrateTaskDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropTaskDetail", arg0, arg1)
	ret0, _ := ret[0].(scheduler.MigrateTaskDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropTaskDetail indicates an expected call of DropTaskDetail.
func (mr *MockISchedulerMockRecorder) DropTaskDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropTaskDetail", reflect.TypeOf((*MockIScheduler)(nil).DropTaskDetail), arg0, arg1)
}

// GetService mocks base method.
func (m *MockIScheduler) GetService(arg0 context.Context, arg1 string) (*proto.SvrInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", arg0, arg1)
	ret0, _ := ret[0].(*proto.SvrInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockISchedulerMockRecorder) GetService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockIScheduler)(nil).GetService), arg0, arg1)
}

// ListServices mocks base method.
func (m *MockIScheduler) ListServices(arg0 context.Context, arg1 *scheduler.ListServicesArgs) ([]*proto.SvrInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServices", arg0, arg1)
	ret0, _ := ret[0].([]*proto.SvrInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices.
func (mr *MockISchedulerMockRecorder) ListServices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockIScheduler)(nil).ListServices), arg0, arg1)
}

// ManualMigrateTaskDetail mocks base method.
func (m *MockIScheduler) ManualMigrateTaskDetail(arg0 context.Context, arg1 *scheduler.TaskStatArgs) (scheduler.MigrateTaskDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManualMigrateTaskDetail", arg0, arg1)
	ret0, _ := ret[0].(scheduler.MigrateTaskDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ManualMigrateTaskDetail indicates an expected call of ManualMigrateTaskDetail.
func (mr *MockISchedulerMockRecorder) ManualMigrateTaskDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManualMigrateTaskDetail", reflect.TypeOf((*MockIScheduler)(nil).ManualMigrateTaskDetail), arg0, arg1)
}

// ReclaimTask mocks base method.
func (m *MockIScheduler) ReclaimTask(arg0 context.Context, arg1 *scheduler.ReclaimTaskArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReclaimTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReclaimTask indicates an expected call of ReclaimTask.
func (mr *MockISchedulerMockRecorder) ReclaimTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReclaimTask", reflect.TypeOf((*MockIScheduler)(nil).ReclaimTask), arg0, arg1)
}

// RegisterService mocks base method.
func (m *MockIScheduler) RegisterService(arg0 context.Context, arg1 *scheduler.RegisterServiceArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterService", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterService indicates an expected call of RegisterService.
func (mr *MockISchedulerMockRecorder) RegisterService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterService", reflect.TypeOf((*MockIScheduler)(nil).RegisterService), arg0, arg1)
}

// RenewalTask mocks base method.
func (m *MockIScheduler) RenewalTask(arg0 context.Context, arg1 *scheduler.TaskRenewalArgs) (*scheduler.TaskRenewalRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenewalTask", arg0, arg1)
	ret0, _ := ret[0].(*scheduler.TaskRenewalRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenewalTask indicates an expected call of RenewalTask.
func (mr *MockISchedulerMockRecorder) RenewalTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewalTask", reflect.TypeOf((*MockIScheduler)(nil).RenewalTask), arg0, arg1)
}

// RepairTaskDetail mocks base method.
func (m *MockIScheduler) RepairTaskDetail(arg0 context.Context, arg1 *scheduler.TaskStatArgs) (scheduler.RepairTaskDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepairTaskDetail", arg0, arg1)
	ret0, _ := ret[0].(scheduler.RepairTaskDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepairTaskDetail indicates an expected call of RepairTaskDetail.
func (mr *MockISchedulerMockRecorder) RepairTaskDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepairTaskDetail", reflect.TypeOf((*MockIScheduler)(nil).RepairTaskDetail), arg0, arg1)
}

// ReportTask mocks base method.
func (m *MockIScheduler) ReportTask(arg0 context.Context, arg1 *scheduler.TaskReportArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportTask indicates an expected call of ReportTask.
func (mr *MockISchedulerMockRecorder) ReportTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportTask", reflect.TypeOf((*MockIScheduler)(nil).ReportTask), arg0, arg1)
}

// Stats mocks base method.
func (m *MockIScheduler) Stats(arg0 context.Context) (scheduler.TasksStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats", arg0)
	ret0, _ := ret[0].(scheduler.TasksStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stats indicates an expected call of Stats.
func (mr *MockISchedulerMockRecorder) Stats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockIScheduler)(nil).Stats), arg0)
}
