// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cubefs/blobstore/api/allocator (interfaces: Api)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	allocator "github.com/cubefs/blobstore/api/allocator"
	gomock "github.com/golang/mock/gomock"
)

// MockAllocatorAPI is a mock of Api interface.
type MockAllocatorAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAllocatorAPIMockRecorder
}

// MockAllocatorAPIMockRecorder is the mock recorder for MockAllocatorAPI.
type MockAllocatorAPIMockRecorder struct {
	mock *MockAllocatorAPI
}

// NewMockAllocatorAPI creates a new mock instance.
func NewMockAllocatorAPI(ctrl *gomock.Controller) *MockAllocatorAPI {
	mock := &MockAllocatorAPI{ctrl: ctrl}
	mock.recorder = &MockAllocatorAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAllocatorAPI) EXPECT() *MockAllocatorAPIMockRecorder {
	return m.recorder
}

// VolumeAlloc mocks base method.
func (m *MockAllocatorAPI) VolumeAlloc(arg0 context.Context, arg1 string, arg2 *allocator.AllocVolsArgs) ([]allocator.AllocRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeAlloc", arg0, arg1, arg2)
	ret0, _ := ret[0].([]allocator.AllocRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeAlloc indicates an expected call of VolumeAlloc.
func (mr *MockAllocatorAPIMockRecorder) VolumeAlloc(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeAlloc", reflect.TypeOf((*MockAllocatorAPI)(nil).VolumeAlloc), arg0, arg1, arg2)
}
